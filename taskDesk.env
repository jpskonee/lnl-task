Coding Test (Full Stack Engineer)
Brief: Our technical interview - this coding test and the final stage after this - is an exercise that
involves coding a solution to a product problem, with a follow-up discussion to walk through
how you came up with your solution and answer some additional questions on how you might
extend your solution to fit new features. You can expect to apply basic knowledge of data
structures and algorithms to your solution. Although writing code will definitely be a portion of
the interview, there is also a strong emphasis on brainstorming and how you think through the
problem, so be prepared to discuss how you thought through the problem during the discussion.
Design, model, and implement a client API for managing shipments and packages, and
functions to report on various features associated with the shipments and packages.


Package: A package is a unit of metal that can be placed on a shipment. A package has an
associated supplier (who is sending the package), buyer (who is receiving the package), and
contents (the type and quantity of metal inside the package e.g., 50 MT of Copper). It also has
an associated origin location (where the package is coming from - e.g., Detroit) and destination
location (where the package is going to be dropped off e.g., Baltimore).

Shipment: A shipment can come on 2 types of vehicles: truck or rail. Depending on the
vehicle type, a shipment can also contain multiple packages of metal, going to and from
different origins and destinations.

- Truck Shipment: A truck only ever has 1 package of metal, with a single origin
and destination.

- Rail Shipment: A rail shipment can hold multiple packages of metal (of
different quantity and type), and each package can potentially have a different
origin and destination, buyer and seller.

Reporting: We want to be able to return:
- Supplier/Buyer: What shipments are associated with a specific supplier <->
buyer pair? What packages in those shipments?
- Carbon Emissions: If 1 truck shipment emits 1 unit of carbon per kilometre
travelled, and 1 rail shipment emits 5 units of carbon per kilometre travelled, what is
the associated carbon emission for a specific supplier? For simplicity, you can assume
that each package has an associated distance based on the origin and destination.
- Efficiency: Which supplier has the most efficient carbon emissions (where efficiency is
calculated as the number of carbon units emitted divided by the number of packages)?

Note by API we are not referring to a REST or another web API, instead think of it as a set
of methods/functions/classes that handle the requests. The implementation here should
be simple and in-memory and assumed to be running on a single instance, as though we
were mocking this client API for testing purposes.

We recommend first designing the API interface(s) and models. Then implementing piece by
piece and running the code / testing iteratively for each piece. To save time, you do not need
to write unit tests, but you should give some example test cases you would want to use.